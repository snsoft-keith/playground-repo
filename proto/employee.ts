// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: employee.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "employee";

export interface GetEmployeeRequest {
  _id: string;
}

export interface GetEmployeeResponse {
  _id: string;
  name: string;
}

export const EMPLOYEE_PACKAGE_NAME = "employee";

function createBaseGetEmployeeRequest(): GetEmployeeRequest {
  return { _id: "" };
}

export const GetEmployeeRequest: MessageFns<GetEmployeeRequest> = {
  encode(message: GetEmployeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message._id !== "") {
      writer.uint32(10).string(message._id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmployeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmployeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message._id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetEmployeeResponse(): GetEmployeeResponse {
  return { _id: "", name: "" };
}

export const GetEmployeeResponse: MessageFns<GetEmployeeResponse> = {
  encode(message: GetEmployeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message._id !== "") {
      writer.uint32(10).string(message._id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmployeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmployeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message._id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface EmployeeServiceClient {
  getEmployee(request: GetEmployeeRequest): Observable<GetEmployeeResponse>;
}

export interface EmployeeServiceController {
  getEmployee(
    request: GetEmployeeRequest,
  ): Promise<GetEmployeeResponse> | Observable<GetEmployeeResponse> | GetEmployeeResponse;
}

export function EmployeeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getEmployee"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EmployeeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EmployeeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EMPLOYEE_SERVICE_NAME = "EmployeeService";

export type EmployeeServiceService = typeof EmployeeServiceService;
export const EmployeeServiceService = {
  getEmployee: {
    path: "/employee.EmployeeService/GetEmployee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEmployeeRequest): Buffer => Buffer.from(GetEmployeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetEmployeeRequest => GetEmployeeRequest.decode(value),
    responseSerialize: (value: GetEmployeeResponse): Buffer => Buffer.from(GetEmployeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetEmployeeResponse => GetEmployeeResponse.decode(value),
  },
} as const;

export interface EmployeeServiceServer extends UntypedServiceImplementation {
  getEmployee: handleUnaryCall<GetEmployeeRequest, GetEmployeeResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
