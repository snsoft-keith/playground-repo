// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: employee.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "employee";

export interface CreateEmployeeRequest {
  name: string;
}

export interface CreateEmployeeResponse {
  _id: string;
}

export interface GetOneEmployeeRequest {
  _id: string;
}

export interface GetOneEmployeeResponse {
  _id: string;
  name: string;
}

export const EMPLOYEE_PACKAGE_NAME = "employee";

function createBaseCreateEmployeeRequest(): CreateEmployeeRequest {
  return { name: "" };
}

export const CreateEmployeeRequest: MessageFns<CreateEmployeeRequest> = {
  encode(message: CreateEmployeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEmployeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmployeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateEmployeeResponse(): CreateEmployeeResponse {
  return { _id: "" };
}

export const CreateEmployeeResponse: MessageFns<CreateEmployeeResponse> = {
  encode(message: CreateEmployeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message._id !== "") {
      writer.uint32(10).string(message._id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEmployeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmployeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message._id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetOneEmployeeRequest(): GetOneEmployeeRequest {
  return { _id: "" };
}

export const GetOneEmployeeRequest: MessageFns<GetOneEmployeeRequest> = {
  encode(message: GetOneEmployeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message._id !== "") {
      writer.uint32(10).string(message._id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOneEmployeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOneEmployeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message._id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetOneEmployeeResponse(): GetOneEmployeeResponse {
  return { _id: "", name: "" };
}

export const GetOneEmployeeResponse: MessageFns<GetOneEmployeeResponse> = {
  encode(message: GetOneEmployeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message._id !== "") {
      writer.uint32(10).string(message._id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOneEmployeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOneEmployeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message._id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface EmployeeServiceClient {
  createEmployee(request: CreateEmployeeRequest): Observable<CreateEmployeeResponse>;

  getOneEmployee(request: GetOneEmployeeRequest): Observable<GetOneEmployeeResponse>;
}

export interface EmployeeServiceController {
  createEmployee(
    request: CreateEmployeeRequest,
  ): Promise<CreateEmployeeResponse> | Observable<CreateEmployeeResponse> | CreateEmployeeResponse;

  getOneEmployee(
    request: GetOneEmployeeRequest,
  ): Promise<GetOneEmployeeResponse> | Observable<GetOneEmployeeResponse> | GetOneEmployeeResponse;
}

export function EmployeeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createEmployee", "getOneEmployee"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EmployeeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EmployeeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EMPLOYEE_SERVICE_NAME = "EmployeeService";

export type EmployeeServiceService = typeof EmployeeServiceService;
export const EmployeeServiceService = {
  createEmployee: {
    path: "/employee.EmployeeService/CreateEmployee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateEmployeeRequest): Buffer =>
      Buffer.from(CreateEmployeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateEmployeeRequest => CreateEmployeeRequest.decode(value),
    responseSerialize: (value: CreateEmployeeResponse): Buffer =>
      Buffer.from(CreateEmployeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateEmployeeResponse => CreateEmployeeResponse.decode(value),
  },
  getOneEmployee: {
    path: "/employee.EmployeeService/GetOneEmployee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOneEmployeeRequest): Buffer =>
      Buffer.from(GetOneEmployeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetOneEmployeeRequest => GetOneEmployeeRequest.decode(value),
    responseSerialize: (value: GetOneEmployeeResponse): Buffer =>
      Buffer.from(GetOneEmployeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetOneEmployeeResponse => GetOneEmployeeResponse.decode(value),
  },
} as const;

export interface EmployeeServiceServer extends UntypedServiceImplementation {
  createEmployee: handleUnaryCall<CreateEmployeeRequest, CreateEmployeeResponse>;
  getOneEmployee: handleUnaryCall<GetOneEmployeeRequest, GetOneEmployeeResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
